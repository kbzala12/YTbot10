import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
from flask import Flask, render_template_string
import threading
import sqlite3
import os

# ‡§ï‡•â‡§®‡•ç‡§´‡§ø‡§ó‡§∞‡•á‡§∂‡§®
TOKEN = "7978191312:AAFyWVkBruuR42HTuTd_sQxFaKHBrre0VWw"
ADMIN_ID = 7459795138
REWARD_COINS = 100
REQUIRED_GROUPS = [
    {"name": "Bingyt Bot", "url": "https://t.me/Bingyt_bot"},
    {"name": "Boom Up", "url": "https://t.me/boomupbot10"},
    {"name": "Free Subscribe", "url": "https://t.me/FreesubscribeYouTube2k"}
]

# ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§∏‡•á‡§ü‡§Ö‡§™
conn = sqlite3.connect('bot_db.sqlite', check_same_thread=False)
cursor = conn.cursor()

# ‡§ü‡•á‡§¨‡§≤‡•ç‡§∏ ‡§¨‡§®‡§æ‡§è‡§Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    coins INTEGER DEFAULT 0,
    referrals INTEGER DEFAULT 0,
    joined_all_groups INTEGER DEFAULT 0,
    join_date TEXT DEFAULT CURRENT_TIMESTAMP
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS referrals (
    referral_id INTEGER PRIMARY KEY AUTOINCREMENT,
    referrer_id INTEGER,
    referred_id INTEGER,
    date TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (referrer_id) REFERENCES users (user_id),
    FOREIGN KEY (referred_id) REFERENCES users (user_id)
)
''')
conn.commit()

# Flask ‡§µ‡•á‡§¨ ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°
app = Flask(__name__)

@app.route('/')
def dashboard():
    # ‡§ü‡•â‡§™ ‡§∞‡•á‡§´‡§∞‡§∞‡•ç‡§∏
    cursor.execute('''
        SELECT username, referrals, coins 
        FROM users 
        ORDER BY referrals DESC 
        LIMIT 10
    ''')
    top_referrers = cursor.fetchall()
    
    # ‡§ü‡•ã‡§ü‡§≤ ‡§∏‡•ç‡§ü‡•à‡§ü‡•ç‡§∏
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM users WHERE joined_all_groups=1')
    active_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM referrals')
    total_referrals = cursor.fetchone()[0]
    
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Referral Bot Dashboard</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            .card {{ background: #f5f5f5; padding: 20px; border-radius: 10px; margin: 10px 0; }}
            table {{ width: 100%; border-collapse: collapse; }}
            th, td {{ padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }}
            .btn {{ background: #0088cc; color: white; padding: 10px 15px; text-decoration: none; border-radius: 5px; }}
        </style>
    </head>
    <body>
        <h1>ü§ñ Referral Bot Dashboard</h1>
        
        <div class="card">
            <h3>üìä ‡§∏‡•ç‡§ü‡•à‡§ü‡§ø‡§∏‡•ç‡§ü‡§ø‡§ï‡•ç‡§∏</h3>
            <p>‡§ï‡•Å‡§≤ ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏: {total_users}</p>
            <p>‡§è‡§ï‡•ç‡§ü‡§ø‡§µ ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏: {active_users}</p>
            <p>‡§ï‡•Å‡§≤ ‡§∞‡•á‡§´‡§∞‡§≤‡•ç‡§∏: {total_referrals}</p>
        </div>
        
        <h2>üèÜ ‡§ü‡•â‡§™ 10 ‡§∞‡•á‡§´‡§∞‡§∞‡•ç‡§∏</h2>
        <table>
            <tr>
                <th>‡§∞‡•à‡§Ç‡§ï</th>
                <th>‡§Ø‡•Ç‡§ú‡§∞‡§®‡•á‡§Æ</th>
                <th>‡§∞‡•á‡§´‡§∞‡§≤‡•ç‡§∏</th>
                <th>‡§ï‡•â‡§á‡§®‡•ç‡§∏</th>
            </tr>
            {% for i, user in enumerate(top_referrers, 1) %}
            <tr>
                <td>{i}</td>
                <td>{{user[0] or 'Anonymous'}}</td>
                <td>{{user[1]}}</td>
                <td>{{user[2]}}</td>
            </tr>
            {% endfor %}
        </table>
        
        <div style="margin-top: 20px;">
            <a href="https://t.me/share/url?url=https://t.me/your_bot&text=Join%20this%20awesome%20bot!" class="btn">
                üì¢ ‡§¨‡•ã‡§ü ‡§∂‡•á‡§Ø‡§∞ ‡§ï‡§∞‡•á‡§Ç
            </a>
        </div>
    </body>
    </html>
    """
    return render_template_string(html, enumerate=enumerate, top_referrers=top_referrers)

def run_flask():
    app.run(host='0.0.0.0', port=5000)

# Flask ‡§•‡•ç‡§∞‡•á‡§° ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
flask_thread = threading.Thread(target=run_flask)
flask_thread.daemon = True
flask_thread.start()

# ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def check_groups(user_id, context):
    try:
        for group in REQUIRED_GROUPS:
            group_username = group["url"].split('/')[-1]
            chat_member = await context.bot.get_chat_member(f"@{group_username}", user_id)
            if chat_member.status in ['left', 'kicked']:
                return False
        return True
    except Exception as e:
        logger.error(f"Error checking groups: {e}")
        return False

async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    referral_link = f"https://t.me/{context.bot.username}?start={user.id}"
    
    # ‡§∞‡•á‡§´‡§∞‡§≤ ‡§ö‡•á‡§ï
    if context.args:
        referrer_id = int(context.args[0])
        if referrer_id != user.id:  # ‡§ñ‡•Å‡§¶ ‡§ï‡•ã ‡§∞‡•á‡§´‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ
            cursor.execute('SELECT 1 FROM users WHERE user_id=?', (user.id,))
            if not cursor.fetchone():
                # ‡§®‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§∞
                cursor.execute('''
                    INSERT INTO users (user_id, username, coins)
                    VALUES (?, ?, ?)
                ''', (user.id, user.username or str(user.id), REWARD_COINS))
                
                # ‡§∞‡•á‡§´‡§∞‡§≤ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°
                cursor.execute('''
                    INSERT INTO referrals (referrer_id, referred_id)
                    VALUES (?, ?)
                ''', (referrer_id, user.id))
                
                # ‡§∞‡•á‡§´‡§∞‡§∞ ‡§ï‡•ã ‡§á‡§®‡§æ‡§Æ
                cursor.execute('''
                    UPDATE users 
                    SET coins = coins + ?, referrals = referrals + 1 
                    WHERE user_id = ?
                ''', (REWARD_COINS, referrer_id))
                conn.commit()
                
                await update.message.reply_text(
                    f"üéâ ‡§Ü‡§™‡§ï‡•ã {REWARD_COINS} ‡§ï‡•â‡§á‡§®‡•ç‡§∏ ‡§Æ‡§ø‡§≤‡•á ‡§π‡•à‡§Ç ‡§∞‡•á‡§´‡§∞‡§≤ ‡§¨‡•ã‡§®‡§∏ ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç!"
                )
                
                # ‡§∞‡•á‡§´‡§∞‡§∞ ‡§ï‡•ã ‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§®
                try:
                    await context.bot.send_message(
                        chat_id=referrer_id,
                        text=f"üéä {user.username or user.id} ‡§®‡•á ‡§Ü‡§™‡§ï‡•á ‡§∞‡•á‡§´‡§∞‡§≤ ‡§≤‡§ø‡§Ç‡§ï ‡§∏‡•á ‡§ú‡•â‡§á‡§® ‡§ï‡§ø‡§Ø‡§æ!\n"
                             f"‡§Ü‡§™‡§ï‡•ã {REWARD_COINS} ‡§ï‡•â‡§á‡§®‡•ç‡§∏ ‡§Æ‡§ø‡§≤‡•á ‡§π‡•à‡§Ç!"
                    )
                except Exception as e:
                    logger.error(f"Could not notify referrer: {e}")
    
    # ‡§Ø‡•Ç‡§ú‡§∞ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username) 
        VALUES (?, ?)
    ''', (user.id, user.username or str(user.id)))
    conn.commit()
    
    # ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§ö‡•á‡§ï
    has_joined = await check_groups(user.id, context)
    
    if has_joined:
        cursor.execute('UPDATE users SET joined_all_groups=1 WHERE user_id=?', (user.id,))
        conn.commit()
        
        # ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏ ‡§ö‡•á‡§ï
        cursor.execute('SELECT coins FROM users WHERE user_id=?', (user.id,))
        coins = cursor.fetchone()[0]
        
        keyboard = [
            [InlineKeyboardButton("üì¢ ‡§á‡§®‡§µ‡§æ‡§á‡§ü ‡§´‡•ç‡§∞‡•á‡§Ç‡§°‡•ç‡§∏", 
             url=f"https://t.me/share/url?url={referral_link}&text=Join%20this%20awesome%20bot%20and%20get%20{REWARD_COINS}%20coins!")],
            [InlineKeyboardButton("üí∞ ‡§Æ‡•á‡§∞‡•á ‡§ï‡•â‡§á‡§®‡•ç‡§∏", callback_data="balance")],
            [InlineKeyboardButton("üåê ‡§µ‡•á‡§¨ ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°", url="http://your-server-ip:5000")]
        ]
        
        await update.message.reply_text(
            f"üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á {user.first_name}!\n\n"
            f"üîó ‡§Ü‡§™‡§ï‡§æ ‡§∞‡•á‡§´‡§∞‡§≤ ‡§≤‡§ø‡§Ç‡§ï:\n<code>{referral_link}</code>\n\n"
            f"üí∞ ‡§Ü‡§™‡§ï‡•á ‡§ï‡•â‡§á‡§®‡•ç‡§∏: <b>{coins}</b>\n\n"
            f"‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç ‡§ï‡•ã ‡§á‡§®‡§µ‡§æ‡§á‡§ü ‡§ï‡§∞‡§ï‡•á {REWARD_COINS} ‡§ï‡•â‡§á‡§®‡•ç‡§∏ ‡§™‡•ç‡§∞‡§§‡§ø ‡§∞‡•á‡§´‡§∞‡§≤ ‡§ï‡§Æ‡§æ‡§è‡§Ç!",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    else:
        # ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§ü‡§®‡•ç‡§∏
        buttons = []
        for group in REQUIRED_GROUPS:
            buttons.append([InlineKeyboardButton(
                f"‡§ú‡•â‡§á‡§® {group['name']}", 
                url=group["url"]
            )])
        
        buttons.append([InlineKeyboardButton(
            "‚úÖ ‡§Æ‡•à‡§Ç‡§®‡•á ‡§ú‡•â‡§á‡§® ‡§ï‡§∞ ‡§≤‡§ø‡§Ø‡§æ", 
            callback_data="check_groups"
        )])
        
        await update.message.reply_text(
            "‚ö†Ô∏è ‡§¨‡•ã‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§ø‡§Æ‡•ç‡§® ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡•á‡§Ç:\n\n" +
            "\n".join([f"‚Ä¢ {group['url']}" for group in REQUIRED_GROUPS]) +
            "\n\n‡§∏‡§≠‡•Ä ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§®‡•Ä‡§ö‡•á ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§è‡§Ç:",
            reply_markup=InlineKeyboardMarkup(buttons),
            disable_web_page_preview=True
        )

async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data == "balance":
        cursor.execute('SELECT coins FROM users WHERE user_id=?', (query.from_user.id,))
        coins = cursor.fetchone()[0]
        
        await query.edit_message_text(
            f"üí∞ ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ <b>{coins} ‡§ï‡•â‡§á‡§®‡•ç‡§∏</b> ‡§π‡•à‡§Ç!\n\n"
            f"‡§Ö‡§ß‡§ø‡§ï ‡§ï‡•â‡§á‡§®‡•ç‡§∏ ‡§ï‡§Æ‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç ‡§ï‡•ã ‡§á‡§®‡§µ‡§æ‡§á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§",
            parse_mode='HTML'
        )
    
    elif query.data == "check_groups":
        has_joined = await check_groups(query.from_user.id, context)
        
        if has_joined:
            cursor.execute('UPDATE users SET joined_all_groups=1 WHERE user_id=?', (query.from_user.id,))
            conn.commit()
            
            await query.edit_message_text(
                "üéâ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§® ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü! ‡§Ö‡§¨ ‡§Ü‡§™ ‡§¨‡•ã‡§ü ‡§ï‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§\n\n"
                "/start ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§ï‡•á ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§"
            )
        else:
            await query.answer(
                "‚ùå ‡§Ü‡§™ ‡§Ö‡§≠‡•Ä ‡§≠‡•Ä ‡§∏‡§≠‡•Ä ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§≤‡§ø‡§Ç‡§ï‡•ç‡§∏ ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§ï‡•á ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡•á‡§Ç‡•§",
                show_alert=True
            )

def main():
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher
    
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    
    updater.start_polling()
    logger.info("‡§¨‡•ã‡§ü ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à...")
    updater.idle()

if __name__ == '__main__':
    main()